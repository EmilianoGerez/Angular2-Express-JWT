{"version":3,"sources":["user/services/user.service.ts"],"names":[],"mappings":"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","file":"user.service.js","sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {Http, Headers} from \"@angular/http\";\r\nimport {AuthHttp, JwtHelper} from \"angular2-jwt\";\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/debounceTime';\r\nimport 'rxjs/add/operator/distinctUntilChanged';\r\nimport 'rxjs/add/operator/switchMap';\r\nimport {Control} from \"@angular/common\";\r\nimport {User} from \"../models/user.model\";\r\n\r\n@Injectable()\r\n\r\nexport class UserService {\r\n  private baseUrl = 'https://angularjwtdemo.herokuapp.com/api/users/';\r\n  private _headers:Headers = new Headers();\r\n  private currentUser:User = new User();\r\n  private _jwtHelper:JwtHelper = new JwtHelper();\r\n\r\n  constructor(private _http:Http,\r\n              private _authHttp:AuthHttp) {\r\n    this._headers.append('Content-Type', 'application/json');\r\n\r\n    // if the user refreshing the browser, user data are lost,\r\n    // we can get the user data from the  local storage,\r\n    // but we need check the accuracy of the data.\r\n    let userLocal = localStorage.getItem('currentUser');\r\n    let token = localStorage.getItem('id_token');\r\n    if (userLocal && token) {\r\n      let currentUser = JSON.parse(userLocal);\r\n      let decode = this._jwtHelper.decodeToken(token);\r\n      if (currentUser._id !== decode._id) {\r\n        localStorage.removeItem('currentUser');\r\n        localStorage.removeItem('id_token');\r\n        return;\r\n      }\r\n      userLocal = JSON.parse(userLocal);\r\n      this.currentUser = userLocal;\r\n    }\r\n  }\r\n\r\n  getOne(id:string) {\r\n    return this._authHttp.get(this.getUrl(id))\r\n      .map(res => res.json());\r\n  }\r\n\r\n  create(user:any) {\r\n    return this._http.post(this.baseUrl, JSON.stringify(user), {headers: this._headers})\r\n      .map(res => res.json());\r\n  }\r\n\r\n  update(user:any) {\r\n    return this._authHttp.put(this.getUrl(this.currentUser._id), JSON.stringify(user), {headers: this._headers})\r\n      .map(res => res.json());\r\n  }\r\n\r\n  delete(id:string) {\r\n    return this._authHttp.delete(this.getUrl(id))\r\n      .map(res => res.json());\r\n  }\r\n\r\n// Helpers methods\r\n////////////////////////\r\n\r\n  emailVerify(email:Control) {\r\n    return email.valueChanges\r\n      .map(data => data.toString())\r\n      .debounceTime(400)\r\n      .distinctUntilChanged()\r\n      .switchMap(search => this._http.get(this.getUrl('search/' + search)));\r\n  }\r\n\r\n  getUrl(path:string) {\r\n    return this.baseUrl + path;\r\n  }\r\n\r\n  getCurrentUser() {\r\n    return this.currentUser;\r\n  }\r\n\r\n  setCurrentUser(user:any) {\r\n    localStorage.setItem('currentUser', JSON.stringify(user));\r\n    this.currentUser = user;\r\n  }\r\n}\r\n"]}