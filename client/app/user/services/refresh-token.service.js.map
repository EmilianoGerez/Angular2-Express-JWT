{"version":3,"sources":["user/services/refresh-token.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAyB,eAAe,CAAC,CAAA;AACzC,qBAA4B,eAAe,CAAC,CAAA;AAC5C,kCAAqB,4BAA4B,CAAC,CAAA;AAClD,mBAAwB,SAAS,CAAC,CAAA;AAClC,QAAO,uBAAuB,CAAC,CAAA;AAC/B,6BAAkC,cAAc,CAAC,CAAA;AAKjD;IAKE,6BAAoB,KAAU,EACV,SAAkB,EAClB,OAAc;QAFd,UAAK,GAAL,KAAK,CAAK;QACV,cAAS,GAAT,SAAS,CAAS;QAClB,YAAO,GAAP,OAAO,CAAO;QAN1B,QAAG,GAAG,uDAAuD,CAAC;QAC9D,aAAQ,GAAW,IAAI,cAAO,EAAE,CAAC;QACjC,eAAU,GAAa,IAAI,wBAAS,EAAE,CAAC;QAK7C,IAAI,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC7C,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACV,IAAI,CAAC,eAAe,EAAE,CAAC;QACzB,CAAC;IAEH,CAAC;IAED,6CAAe,GAAf;QAAA,iBAeC;QAdC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,SAAS,CAClC,UAAA,KAAK;YACH,IAAI,GAAG,GAAU,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;YACtC,IAAI,MAAM,GAAG,KAAI,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC;YACpD,IAAI,GAAG,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;YACtB,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAC1B,IAAI,KAAK,GAAG,GAAG,CAAC,OAAO,EAAE,GAAG,GAAG,CAAC;YAEhC,IAAI,YAAY,GAAG,cAAS,CAAC,KAAK,CAAC;YAEnC,YAAY,CAAC,QAAQ,CAAC;gBACpB,KAAI,CAAC,YAAY,EAAE,CAAC;YACtB,CAAC,EAAE,KAAK,CAAC,CAAC;QACZ,CAAC,CAAC,CAAC;IACP,CAAC;IAED,0CAAY,GAAZ;QAAA,iBAiBC;QAhBC,IAAI,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC7C,iCAAiC;QACjC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;QAC1C,uCAAuC;QACvC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,EAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAC,CAAC;aACtD,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;aACtB,SAAS,CACR,UAAA,IAAI;YACF,YAAY,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7C,KAAI,CAAC,eAAe,EAAE,CAAC;QACzB,CAAC,EACD,UAAA,GAAG;YACD,YAAY,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;YACpC,YAAY,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;YACvC,KAAI,CAAC,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACT,CAAC;IAnDH;QAAC,iBAAU,EAAE;;2BAAA;IAoDb,0BAAC;AAAD,CAlDA,AAkDC,IAAA;AAlDY,2BAAmB,sBAkD/B,CAAA","file":"refresh-token.service.js","sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {Http, Headers} from '@angular/http';\r\nimport {Router} from '@angular/router-deprecated';\r\nimport {Scheduler} from 'rxjs/Rx';\r\nimport 'rxjs/add/operator/map';\r\nimport {JwtHelper, AuthHttp} from \"angular2-jwt\";\r\n\r\n\r\n@Injectable()\r\n\r\nexport class RefreshTokenService {\r\n  private url = 'https://angularjwtdemo.herokuapp.com/api/auth/refresh';\r\n  private _headers:Headers = new Headers();\r\n  private _jwtHelper:JwtHelper = new JwtHelper();\r\n\r\n  constructor(private _http:Http,\r\n              private _authHttp:AuthHttp,\r\n              private _router:Router) {\r\n    let token = localStorage.getItem('id_token');\r\n    if (token) {\r\n      this.scheduleRefresh();\r\n    }\r\n\r\n  }\r\n\r\n  scheduleRefresh() {\r\n    this._authHttp.tokenStream.subscribe(\r\n      token => {\r\n        let now:number = new Date().valueOf();\r\n        let jwtExp = this._jwtHelper.decodeToken(token).exp;\r\n        let exp = new Date(0);\r\n        exp.setUTCSeconds(jwtExp);\r\n        let delay = exp.valueOf() - now;\r\n\r\n        let queueRefresh = Scheduler.queue;\r\n\r\n        queueRefresh.schedule(() => {\r\n          this.refreshToken();\r\n        }, delay);\r\n      });\r\n  }\r\n\r\n  refreshToken() {\r\n    let token = localStorage.getItem('id_token');\r\n    // TODO check if token is present\r\n    this._headers.set('Authorization', token);\r\n    // TODO logout on error expired session\r\n    return this._http.get(this.url, {headers: this._headers})\r\n      .map(res => res.json())\r\n      .subscribe(\r\n        data => {\r\n          localStorage.setItem('id_token', data.token);\r\n          this.scheduleRefresh();\r\n        },\r\n        err => {\r\n          localStorage.removeItem('id_token');\r\n          localStorage.removeItem('currentUser');\r\n          this._router.navigateByUrl('/login');\r\n        });\r\n  }\r\n}\r\n"]}