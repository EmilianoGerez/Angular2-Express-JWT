{"version":3,"sources":["user/components/partials/session-list.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAuC,eAAe,CAAC,CAAA;AACvD,2BAAmB,yBAAyB,CAAC,CAAA;AAC7C,6BAA0B,6BAA6B,CAAC,CAAA;AAQxD;IAME,8BAAoB,YAAwB;QAAxB,iBAAY,GAAZ,YAAY,CAAY;QAF5C,cAAS,GAAW,KAAK,CAAC;IAG1B,CAAC;IAED,2CAAY,GAAZ,UAAa,eAAmB;QAAhC,iBAWC;QAVC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,SAAS,GAAG,eAAe,CAAC,GAAG,CAAC;QACpC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,SAAS,CAAC;aACtC,SAAS,CACR,UAAA,GAAG;YACD,KAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,KAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAC/B,CAAC,EACD,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAC1B,CAAC;IACN,CAAC;IAGO,uCAAQ,GAAhB,UAAiB,GAAO;QACtB,IAAI,CAAC,QAAQ,GAAG;YACd,IAAI,EAAE,QAAQ;YACd,GAAG,EAAE,uBAAuB;SAC7B,CAAC;IACJ,CAAC;IAEO,2CAAY,GAApB,UAAqB,SAAgB;QACnC,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAEtC,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAA,OAAO;YAChC,MAAM,CAAC,OAAO,CAAC,GAAG,KAAK,SAAS,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAElC,IAAI,CAAC,UAAU,GAAG;YAChB,IAAI,EAAE,kBAAkB;YACxB,GAAG,EAAE,EAAE;SACR,CAAC;IACJ,CAAC;IA1CD;QAAC,YAAK,EAAE;;0DAAA;IAPV;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,cAAc;YACxB,WAAW,EAAE,iDAAiD;YAC9D,SAAS,EAAE,CAAC,0BAAW,CAAC;SACzB,CAAC;;4BAAA;IA8CF,2BAAC;AAAD,CA5CA,AA4CC,IAAA;AA5CY,4BAAoB,uBA4ChC,CAAA","file":"session-list.component.js","sourcesContent":["import {Component, Input, OnInit} from \"@angular/core\";\r\nimport {User} from \"../../models/user.model\";\r\nimport {AuthService} from \"../../services/auth.service\";\r\n\r\n@Component({\r\n  selector: 'session-list',\r\n  templateUrl: './app/user/templates/session-list.template.html',\r\n  providers: [AuthService]\r\n})\r\n\r\nexport class SessionListComponent {\r\n  @Input() userData:User;\r\n  errorMsg:any;\r\n  successMsg:any;\r\n  isClosing:boolean = false;\r\n\r\n  constructor(private _authService:AuthService) {\r\n  }\r\n\r\n  closeSession(selectedSession:any) {\r\n    this.isClosing = true;\r\n    let sessionId = selectedSession._id;\r\n    this._authService.closeSession(sessionId)\r\n      .subscribe(\r\n        req => {\r\n          this.isClosing = false;\r\n          this.closeSuccess(sessionId);\r\n        },\r\n        err => this.setError(err)\r\n      );\r\n  }\r\n\r\n\r\n  private setError(err:any) {\r\n    this.errorMsg = {\r\n      head: 'Oops!!',\r\n      msg: 'something went wrong.'\r\n    };\r\n  }\r\n\r\n  private closeSuccess(sessionId:string) {\r\n    let sessions = this.userData.sessions;\r\n\r\n    sessions = sessions.filter(session => {\r\n      return session._id !== sessionId;\r\n    });\r\n\r\n    this.userData.sessions = sessions;\r\n\r\n    this.successMsg = {\r\n      head: 'Session closed!!',\r\n      msg: ''\r\n    };\r\n  }\r\n}\r\n"]}