{"version":3,"sources":["user/classes/user.validators.ts"],"names":[],"mappings":";AAEA,QAAO,uBAAuB,CAAC,CAAA;AAE/B;IAAA;IA8CA,CAAC;IA5CQ,0BAAW,GAAlB,UAAmB,WAAuB;QACxC,MAAM,CAAC,UAAU,OAAe;YAC9B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBACjC,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC;qBAC7B,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;qBACtB,SAAS,CACR,UAAA,GAAG;oBACD,EAAE,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;wBAClB,OAAO,CAAC,IAAI,CAAC,CAAC;oBAChB,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,OAAO,CAAC,EAAC,WAAW,EAAE,IAAI,EAAC,CAAC,CAAC;oBAC/B,CAAC;gBACH,CAAC,EACD,UAAA,GAAG;oBACD,OAAO,CAAC,IAAI,CAAC,CAAC;gBAChB,CAAC,CACF,CAAC;YAEN,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;IACJ,CAAC;IAEM,yBAAU,GAAjB,UAAkB,OAAe;QAC/B,IAAI,EAAE,GAAG,wHAAwH,CAAC;QAElI,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,GAAG,EAAC,UAAU,EAAE,IAAI,EAAC,CAAC;IAC9D,CAAC;IAEM,4BAAa,GAApB,UAAqB,KAAkB;QACrC,IAAI,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;QAC5C,IAAI,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC;QAEhD,EAAE,CAAC,CAAC,QAAQ,KAAK,EAAE,IAAI,UAAU,KAAK,EAAE,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QAED,EAAE,CAAC,CAAC,QAAQ,KAAK,UAAU,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,EAAC,aAAa,EAAE,IAAI,EAAC,CAAC;QAC/B,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAGH,qBAAC;AAAD,CA9CA,AA8CC,IAAA;AA9CY,sBAAc,iBA8C1B,CAAA","file":"user.validators.js","sourcesContent":["import {Control, ControlGroup} from \"@angular/common\";\r\nimport {UserService} from \"../services/user.service\";\r\nimport 'rxjs/add/operator/map';\r\n\r\nexport class UserValidators {\r\n\r\n  static emailUnique(userService:UserService) {\r\n    return function (control:Control) {\r\n      return new Promise((resolve, reject) => {\r\n        userService.emailVerify(control)\r\n          .map(res => res.json())\r\n          .subscribe(\r\n            res => {\r\n              if (res.available) {\r\n                resolve(null);\r\n              } else {\r\n                resolve({emailUnique: true});\r\n              }\r\n            },\r\n            err => {\r\n              resolve(null);\r\n            }\r\n          );\r\n\r\n      });\r\n    };\r\n  }\r\n\r\n  static validEmail(control:Control) {\r\n    let re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\r\n\r\n    return (re.test(control.value)) ? null : {validEmail: true};\r\n  }\r\n\r\n  static passwordMatch(group:ControlGroup) {\r\n    let password = group.find('password').value;\r\n    let repassword = group.find('repassword').value;\r\n\r\n    if (password === '' || repassword === '') {\r\n      return null;\r\n    }\r\n\r\n    if (password !== repassword) {\r\n      return {passwordMatch: true};\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n\r\n}\r\n"]}